declare var _default: Util;
export default _default;
declare function Util(): void;
declare class Util {
    paramType(param: any): any;
    objHasKay(obj: any, key: any): any;
    ArrayToObj(arr: any): {};
    keyValueToObje(key: any, value: any): {};
    toDeep(param: any): any;
    toDeepObj(param1: any, param2: any): {};
    toObj(param1: any, param2: any): any;
    objMerge(parentObj: any, part: any): any;
    compose(...args: any[]): (...args: any[]) => any;
    fnMerge(parentObj: any, part: any): any;
    arrayUnique(arr: any): any[];
    arrayMerge(arr1: any, arr2: any): any[];
    arrayMergeUnique(arr1: any, arr2: any): any[];
    encode(input: any): string;
    decode(input: any): string;
    isEmptyObject(obj: any): boolean;
    format(time: any, format: any): any;
    MD5(value: any, bit: any): string;
    clientTimeZone(): string;
    delEmpty(obj: any): {};
    addEvent(el: any, type: any, fn: any, useCapture: any): void;
    removeEvent(el: any, type: any, fn: any, useCapture: any): void;
    addEleLable(eleName: any, className: any, id: any, parent: any): any;
    addScript(fileName: any, urlPath: any, callback: any): void;
    GetUrlParam(paraName: any): any;
    stringSlice(str: any, length: any): any;
    trim(str: any): any;
    changeHash(callback: any): void;
    deviceType(): "tablet" | "phone" | "desktop";
    checkTypeList(list: any, ele: any): any;
    selectorAllEleList(selectors: any): any[];
    getDomainFromUrl(domianStatus: any, host: any): string;
    isiOS: boolean;
    delNotHybrid(obj: any): any;
    getUrlPath(): string;
    detectZoom(): number;
}
//# sourceMappingURL=index.d.ts.map